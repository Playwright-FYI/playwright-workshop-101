"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[110],{8987:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var n=s(5893),i=s(1151);const o={title:"M4 \xb7 Use VS Code"},a=void 0,r={id:"use-vscode",title:"M4 \xb7 Use VS Code",description:"In the previous section, we walked through core concepts related to the Playwright Test Configuration and Playwright Test Specification - but we used the Playwright Commandline (CLI) for executing our tests and viewing reports.",source:"@site/docs/04-use-vscode.md",sourceDirName:".",slug:"/use-vscode",permalink:"/playwright-workshop-101/docs/use-vscode",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"M4 \xb7 Use VS Code"},sidebar:"mainSidebar",previous:{title:"M3 \xb7 Analyze Test Spec",permalink:"/playwright-workshop-101/docs/run-test"},next:{title:"M5 \xb7 Construct Test Spec",permalink:"/playwright-workshop-101/docs/build-e2e-spec"}},d={},h=[{value:"4.1 Getting Started With VS Code",id:"41-getting-started-with-vs-code",level:2},{value:"4.2 Install Playwright Extension",id:"42-install-playwright-extension",level:2},{value:"4.3 Run Test (Headless)",id:"43-run-test-headless",level:2},{value:"4.4 Show Browser (Headed)",id:"44-show-browser-headed",level:2},{value:"4.5 UI Mode (Time Travel)",id:"45-ui-mode-time-travel",level:2},{value:"4.6 Watch Mode (Live Reload Tests)",id:"46-watch-mode-live-reload-tests",level:2},{value:"4.7 Debugging Tests",id:"47-debugging-tests",level:2},{value:"4.7 Generating Tests",id:"47-generating-tests",level:2},{value:"4.8 Next Steps",id:"48-next-steps",level:2}];function l(e){const t=Object.assign({p:"p",em:"em",strong:"strong",a:"a",h2:"h2",img:"img",code:"code",blockquote:"blockquote",pre:"pre",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["In the previous section, we walked through core concepts related to the Playwright Test Configuration and Playwright Test Specification - but we used the ",(0,n.jsx)(t.em,{children:"Playwright Commandline"})," (CLI) for executing our tests and viewing reports."]}),"\n",(0,n.jsxs)(t.p,{children:["What if we could do all this ",(0,n.jsx)(t.em,{children:"within our Visual Studio Code environment"})," and have a more ",(0,n.jsx)(t.strong,{children:"visual"})," interaction process for authoring, running, and debugging, our tests."]}),"\n",(0,n.jsxs)(t.p,{children:["With the ",(0,n.jsx)(t.a,{href:"https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright",children:"Playwright Visual Studio Code Extension"}),", you get a superior developer experience ",(0,n.jsx)(t.em,{children:"and some unique tooling features"})," that will soon make this your preferred way to interact with the Playwright Test runner. Let's jump in and take a tour."]}),"\n",(0,n.jsx)(t.h2,{id:"41-getting-started-with-vs-code",children:"4.1 Getting Started With VS Code"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/getting-started-vscode",children:"Playwright docs"})," have a comprehensive tutorial with the video walkthrough below that I recommend you watch in your own time. In this lesson, we'll try to walk through a subset of these exercises to get you familiar with usage."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.a,{href:"https://youtu.be/Xz6lhEzgI5I",children:[" ",(0,n.jsx)(t.img,{src:"https://img.youtube.com/vi/Xz6lhEzgI5I/hqdefault.jpg",alt:"Playwright VS Code"})," "]})}),"\n",(0,n.jsx)(t.h2,{id:"42-install-playwright-extension",children:"4.2 Install Playwright Extension"}),"\n",(0,n.jsxs)(t.p,{children:["If you are running this workshop in a dev container (e.g., GitHub Codespaces) then you're already covered!! The default ",(0,n.jsx)(t.code,{children:"devcontainer.json"})," ",(0,n.jsx)(t.em,{children:"configuration-as-code"})," solution lists this extension as one of the required customizations for VS Code."]}),"\n",(0,n.jsxs)(t.p,{children:["If you are running this workshop in your local environment without a dev container, then ",(0,n.jsx)(t.a,{href:"https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright",children:"install the extension"})," from the VS Code Marketplace. Once installed, you should spot a beaker icon in the left-hand side of your VS Code window as shown in the screenshot. Note how the extension ",(0,n.jsx)(t.em,{children:"automatically"})," detects and gathers the test specifications in your project."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(5638).Z+"",width:"1497",height:"899"})}),"\n",(0,n.jsx)(t.h2,{id:"43-run-test-headless",children:"4.3 Run Test (Headless)"}),"\n",(0,n.jsxs)(t.p,{children:["Click on the double-arrow at the top of the screen as shown below. You'll notice that Playwright has also detected and gathered ",(0,n.jsx)(t.em,{children:"all available project configurations"})," in a dropdown. Simply pick a desired configuration to run all tests. You can also go to the ",(0,n.jsx)(t.em,{children:"Test Specification"})," panel and select specific tests to run."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(3722).Z+"",width:"1492",height:"897"})}),"\n",(0,n.jsxs)(t.p,{children:["Click the ",(0,n.jsx)(t.em,{children:"Reveal test output"})," option to see the ",(0,n.jsx)(t.code,{children:"Test Results"})," in its own tab. You can see the entire history of test executions - and you can also drill down into a test and  ",(0,n.jsx)(t.code,{children:"Rerun Test Run"})," to re-run that specific test. By default, this runs tests in ",(0,n.jsx)(t.em,{children:"headless"})," mode, ideal for CI/CD and cloud testing contexts."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(8012).Z+"",width:"1410",height:"927"})}),"\n",(0,n.jsx)(t.h2,{id:"44-show-browser-headed",children:"4.4 Show Browser (Headed)"}),"\n",(0,n.jsxs)(t.p,{children:["If you want to run in ",(0,n.jsx)(t.em,{children:"headed mode"}),' you can toggle "Show browser" before running the tests. This is where your experience will differ based on whether you are running in a dev container, or in your local environment.']}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Running in a Dev Container"}),". In the screenshot below, you can see (from the green tab at bottom left) that we are running in the Dev Container when running tests - and get an error indicating we need an X server running in the container, to support this.\n",(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(3798).Z+"",width:"1488",height:"847"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Running in Local Environment"}),". Open your local cloned codebase in a basic VS Code editor - note that the green tab now has no Dev Container. Now, the same action works seamlessly, launching the browser while running tests.\n",(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(2143).Z+"",width:"1946",height:"1011"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Showing Trace Viewer"}),". In regular VS Code editor mode, you can also do other operations (like ",(0,n.jsx)(t.em,{children:"Record tests"})," or ",(0,n.jsx)(t.em,{children:"Show Trace Viewer"}),') that require the launch of a separate UI window. For example, selecting "Show trace viewer" will launch the trace viewer in a separate window.\n',(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(1480).Z+"",width:"1992",height:"951"})]}),"\n",(0,n.jsxs)(t.p,{children:["Now you can select a specific test to run, and the Trace Viewer window will automatically update with the traces (including time-travel diagrams and performance metrics) for that test.\n",(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(4627).Z+"",width:"2025",height:"957"})]}),"\n",(0,n.jsxs)(t.p,{children:["*",(0,n.jsx)(t.em,{children:"But what should we do if we want to get the browser and trace viewer experiences within dev containers?"})," ",(0,n.jsx)(t.em,{children:"Say hello to UI Mode"})," with new support for Docker & Codespaces execution."]}),"\n",(0,n.jsx)(t.h2,{id:"45-ui-mode-time-travel",children:"4.5 UI Mode (Time Travel)"}),"\n",(0,n.jsxs)(t.p,{children:["Here's how UI mode is described in the ",(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode",children:"Playwright docs"}),":"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["UI Mode let's you explore, run and debug tests with a ",(0,n.jsx)(t.strong,{children:"time travel experience"})," complete with ",(0,n.jsx)(t.strong,{children:"watch mode"}),". All test files are loaded into the testing sidebar where you can expand each file and describe block to individually run, view, watch and debug each test. ",(0,n.jsx)(t.strong,{children:"Filter tests"})," by text or @tag or by passed, failed and skipped tests as well as by projects as set in your playwright.config file. ",(0,n.jsx)(t.strong,{children:"See a full trace"})," of your tests and hover back and forward over each action to see what was happening during each step and ",(0,n.jsx)(t.strong,{children:"pop out the DOM snapshot"})," to a separate window for a better debugging experience."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["To run it in a local environment, just run your tests with the ",(0,n.jsx)(t.code,{children:"--ui"})," flag. However, as shown above, this will not work within a dev container. However, the Playwright Team ",(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#docker--github-codespaces",children:"introduced a workaround"})," where the endpoint needs to be bound to the ",(0,n.jsx)(t.code,{children:"0.0.0.0"})," interface to become accessible on the host machine. You can also specify a hardcoded port (using ",(0,n.jsx)(t.code,{children:"--ui-port"}),") if needed. Let's try it:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test --ui-port=8080 --ui-host=0.0.0.0\n"})}),"\n",(0,n.jsx)(t.p,{children:"You should see a popup like this, indicating UI mode is activated."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(8181).Z+"",width:"886",height:"574"})}),"\n",(0,n.jsxs)(t.p,{children:["Click ",(0,n.jsx)(t.code,{children:"Open"})," and see it launch UI Mode in your browser, in its own tab. Now you can try out all the ",(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#running-tests-in-ui-mode",children:"UI Mode Features"})," from your Codespaces-deployed testing environment."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(9064).Z+"",width:"1360",height:"924"})}),"\n",(0,n.jsx)(t.p,{children:"Here are a few things to try:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#filtering-tests",children:"Filter tests"})," - by text, tag, or pass/fail/skip status."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#viewing-test-traces",children:"View test traces"})," - opens a trace-viewer window in UI mode"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#pop-out-and-inspect-the-dom",children:"Pop out and inspect DOM"})," - for debugging with a familiar tool."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#pick-locator",children:"Pick Locator"})," - for optimizations (e.g., save & use in tests)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#timeline-view",children:"View Timeline"})," - time travel over the test execution timeline"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["You can even turn on ",(0,n.jsx)(t.code,{children:"Dark Mode"})," with the toggle at top-left of the UI Mode window.!"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(7845).Z+"",width:"1360",height:"885"})}),"\n",(0,n.jsxs)(t.p,{children:["But the most exciting feature here is ",(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#watch-mode",children:(0,n.jsx)(t.strong,{children:"Watch Mode"})})," which allows you to ",(0,n.jsx)(t.em,{children:"track"})," tests in the UI Mode scope, and automatically re-run the test on detecting changes. It's like a ",(0,n.jsx)(t.em,{children:"live reload"})," for your tests. Let's take a look at this in action."]}),"\n",(0,n.jsx)(t.h2,{id:"46-watch-mode-live-reload-tests",children:"4.6 Watch Mode (Live Reload Tests)"}),"\n",(0,n.jsx)(t.p,{children:"Consider this scenario. Our example test specification tests the workflow of a user who:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"visits the Playwright documentation site"}),"\n",(0,n.jsx)(t.li,{children:'finds the "Get Started" link and clicks it'}),"\n",(0,n.jsxs)(t.li,{children:["visits the ",(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/intro",children:"correct page"})," and starts reading."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:['Let\'s continue that scenario. The user finds that there is a link on that page titled "How to run the example test" and they click on it - to find themselves navigating to the relevant section lower down on the same page. ',(0,n.jsx)(t.strong,{children:"How do we test this and how does UI Mode with Watch help?"})]}),"\n",(0,n.jsxs)(t.p,{children:["First, let's ",(0,n.jsxs)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#watch-mode",children:["turn on ",(0,n.jsx)(t.em,{children:"Watch mode"})]})," as shown below (see the blue eye icon with the 'Watch all' tooltip). This will now start tracking the test specification identified below it, and automatically re-run those tests if they change."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(6861).Z+"",width:"1359",height:"885"})}),"\n",(0,n.jsxs)(t.p,{children:["Next, let's click the ",(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/test-ui-mode#pick-locator",children:"Pick Locator"})," button in blue (bottom panel) - then hover over the link that is the focus of this new user interaction scenario."]}),"\n",(0,n.jsxs)(t.p,{children:["You'll see a blue highlight around the element, and related locator information printed in the terminal area of your editor. Click the ",(0,n.jsx)(t.code,{children:"Copy"})," icon to grab that information."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(6302).Z+"",width:"1361",height:"845"})}),"\n",(0,n.jsxs)(t.p,{children:["Now open the ",(0,n.jsx)(t.code,{children:"example.spec.ts"})," file, and paste the locator information into a new action-assertion section as shown below. ",(0,n.jsx)(t.strong,{children:"Then just save the file"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"\ntest('get started link', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Click the get started link.\n  await page.getByRole('link', { name: 'Get started' }).click();\n\n  // Expects page to have a heading with the name of Installation.\n  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();\n\n  // Locate the page link for \"How to run the example test\" and click it\n  await page.getByRole('link', { name: 'How to run the example test' }).click();\n\n  // Expect to be taken to a page that has a section\n  // on \"Running the Example Test in UI Mode\"\n  await expect(page.getByRole('heading', { name: 'Running the Example Test in UI ModeDirect link to Running the Example Test in UI Mode' })).toBeVisible();\n});\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Because watch mode is activated, this should automatically trigger the re-run of tests - and you should see the test results update in the UI Mode window. ",(0,n.jsx)(t.em,{children:"Note how the Actions panel now shows the 2 additional actions we just added"})," with no additional effort on our part."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Playwright Extension in VS Code",src:s(6299).Z+"",width:"1358",height:"841"})}),"\n",(0,n.jsxs)(t.p,{children:["This has the added value of allowing the developer to stay ",(0,n.jsx)(t.em,{children:"in the flow"})," in their codebase, while monitoring the UI mode window to make sure tests are passing - potentially improving developer productivity by reducing effort to context-switch or manually re-initiate test runs."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Congratulations"})," You just used UI Mode with Watch!!"]}),"\n",(0,n.jsxs)(t.p,{children:["\ud83d\uded1 | We made some changes to the ",(0,n.jsx)(t.code,{children:"example.spec.ts"})," for these exercises. Want to revert the changes? Just replace the modified version from a copy of the original:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"cp tests-example/orig-example.spec.ts tests/example.spec.ts\n"})}),"\n",(0,n.jsxs)(t.p,{children:["We saved the best for last. Now, we come to the last 2 features of the VS Code Extension that will be ",(0,n.jsx)(t.em,{children:"most"})," valuable to developers: ",(0,n.jsx)(t.em,{children:"Debugging"})," and ",(0,n.jsx)(t.em,{children:"Generating"})," tests."]}),"\n",(0,n.jsx)(t.h2,{id:"47-debugging-tests",children:"4.7 Debugging Tests"}),"\n",(0,n.jsxs)(t.p,{children:["With the VS Code extension you can debug your tests right in VS Code see error messages, create breakpoints and live debug your tests. ",(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/getting-started-vscode#debugging-tests",children:"Learn more from the docs"})," or watch this video to get a sense of the debugging support. ",(0,n.jsx)(t.em,{children:"This is best demonstrated when in the guided project coming up later"}),". For now, get a quick overview of the debugging support in this video."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.a,{href:"https://youtu.be/LM4yqrOzmFE",children:[" ",(0,n.jsx)(t.img,{src:"https://img.youtube.com/vi/LM4yqrOzmFE/hqdefault.jpg",alt:"Playwright VS Code"})," "]})}),"\n",(0,n.jsx)(t.h2,{id:"47-generating-tests",children:"4.7 Generating Tests"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://playwright.dev/docs/codegen-intro",children:"CodeGen"})," will auto generate your tests for you as you perform actions in the browser - making it the simplest way to get started authoring tests for complex workflows. The Codegen support in VS Code is more feature-rich than from command-line, and is easier to use given we are already in an editor environment. ",(0,n.jsx)(t.em,{children:"This is also best demonstrated when in the guided project coming up later"}),". For now, get a quick overview of the debugging support in this video."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.a,{href:"https://youtu.be/tJF7UhA59Gc",children:[" ",(0,n.jsx)(t.img,{src:"https://img.youtube.com/vi/tJF7UhA59Gc/hqdefault.jpg",alt:"Playwright VS Code"})," "]})}),"\n",(0,n.jsx)(t.h2,{id:"48-next-steps",children:"4.8 Next Steps"}),"\n",(0,n.jsx)(t.p,{children:"In this section you learned how to use the Visual Studio Code extension to find and run tests, and also how to use UI Mode to get a more visual experience for debugging tests, and how to use Watch Mode to get a live reload experience for seamless test-driven development."}),"\n",(0,n.jsxs)(t.p,{children:["And we learned how Visual Studio Code provides richer tools for ",(0,n.jsx)(t.em,{children:"Generating Tests"})," using the ",(0,n.jsx)(t.code,{children:"Record a New Test"}),", ",(0,n.jsx)(t.code,{children:"Pick Locator"}),", and ",(0,n.jsx)(t.code,{children:"Record at Cursor"})," features. Now - it's time to ",(0,n.jsx)(t.strong,{children:"apply"})," our ",(0,n.jsx)(t.em,{children:"Playwright Fundamentals"})," learnings in a guided project to build an end-to-end test specification for our sample app!"]})]})}const c=function(e={}){const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},6861:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-activate-Watch-d9926eeefb733c62e30bbb6e70a39993.png"},6302:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-find-Locator-b8d27e30518c8580fe300437fae3268a.png"},3722:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-find-configs-5d629900f3e62ad9535938f2389d8b80.png"},5638:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-find-specs-895a56f1dcfeb1ef442f71731e8538b7.png"},8012:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-run-headless-2e51c62d76d9e571b76b6acf8d76f141.png"},4627:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-run-traceviewer-1fbc1c28bcd4f46f65199f2eb31df2c9.png"},3798:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-see-Xerror-13cb030d30dffd65c42bcf65d0ffc270.png"},2143:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-see-browser-69f6776791e8d9ad0d703f50e81c9f47.png"},1480:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-show-traceviewer-6ff51b19f5a3aee95e810927e5a80378.png"},8181:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-start-UImode-4c768b61cecedd76aa016e0e12de7dbe.png"},6299:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-trigger-Watch-8f164b572aafb1c8336f1c802ae8d735.png"},7845:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-use-DarkMode-1febd3ca7066db2bcc6364d67e97645b.png"},9064:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/04-vsc-use-UImode-6ff0175a011b270713e2fb5d62264084.png"},1151:(e,t,s)=>{s.d(t,{Zo:()=>r,ah:()=>o});var n=s(7294);const i=n.createContext({});function o(e){const t=n.useContext(i);return n.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const a={};function r({components:e,children:t,disableParentContext:s}){let r;return r=s?"function"==typeof e?e({}):e||a:o(e),n.createElement(i.Provider,{value:r},t)}}}]);