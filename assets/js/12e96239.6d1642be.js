"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[566],{3898:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>h});var n=s(5893),i=s(1151);const a={title:"M2 \xb7 Validate Setup"},o=void 0,r={id:"setup",title:"M2 \xb7 Validate Setup",description:"In this unit, we'll validate our development environment and check that the sample application is running correctly. We'll also validate our Playwright setup by checking that we can run a basic test.",source:"@site/docs/02-setup.md",sourceDirName:".",slug:"/setup",permalink:"/playwright-workshop-101/docs/setup",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"M2 \xb7 Validate Setup"},sidebar:"mainSidebar",previous:{title:"M1 \xb7 Introduction",permalink:"/playwright-workshop-101/docs/introduction"},next:{title:"M3 \xb7 Analyze Test Spec",permalink:"/playwright-workshop-101/docs/run-test"}},l={},h=[{value:"Step 1: Fork This Repo",id:"step-1-fork-this-repo",level:2},{value:"Step 2: Launch GitHub Codespaces",id:"step-2-launch-github-codespaces",level:2},{value:"Step 3: Validate The Sample App",id:"step-3-validate-the-sample-app",level:2},{value:"Step 4: Validate Playwright Setup",id:"step-4-validate-playwright-setup",level:2},{value:"Step 5: Validate Playwright Test Runner",id:"step-5-validate-playwright-test-runner",level:2},{value:"Step 6: Validate Test With Sample App",id:"step-6-validate-test-with-sample-app",level:2},{value:"\ud83d\uded1 | Don&#39;t Forget To Reset <code>testDir</code>",id:"--dont-forget-to-reset-testdir",level:2}];function c(e){const t=Object.assign({p:"p",h2:"h2",code:"code",a:"a",blockquote:"blockquote",img:"img",em:"em",ul:"ul",li:"li",ol:"ol",pre:"pre"},(0,i.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"In this unit, we'll validate our development environment and check that the sample application is running correctly. We'll also validate our Playwright setup by checking that we can run a basic test."}),"\n",(0,n.jsx)(t.p,{children:"Let's get started."}),"\n",(0,n.jsx)(t.h2,{id:"step-1-fork-this-repo",children:"Step 1: Fork This Repo"}),"\n",(0,n.jsxs)(t.p,{children:["Start by forking this repository to your personal profile on GitHub. The default fork will copy only the ",(0,n.jsx)(t.code,{children:"main"})," branch."]}),"\n",(0,n.jsx)(t.p,{children:"\ud83d\ude80 | Great! You are now ready to validate your developer environment."}),"\n",(0,n.jsx)(t.h2,{id:"step-2-launch-github-codespaces",children:"Step 2: Launch GitHub Codespaces"}),"\n",(0,n.jsxs)(t.p,{children:["You will notice the the repository has a ",(0,n.jsx)(t.code,{children:".devcontainer/devcontainer.json"})," file. This shows that it can be run in a ",(0,n.jsx)(t.a,{href:"https://containers.dev",children:"development container"})," - a pre-configured environment (based on a Docker container image) that has all the necessary tools and libraries installed for you. You can run the container in the cloud (with GitHub Codespaces) or run it in your local device (with Docker Desktop). We'll use the first option."]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["Click the ",(0,n.jsx)(t.code,{children:"Code"})," tab on your fork of the repo, as shown below."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Launch in a codespace",src:s(1909).Z+"",width:"860",height:"922"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["Click ",(0,n.jsx)(t.code,{children:"Create codespace on main"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["You should see a new tab open with a message like the one shown below. This indicates the container is being built. Once ready, the tab transforms into a ",(0,n.jsx)(t.em,{children:"Visual Studio Code Editor UI"})," in the browser."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Build codespace",src:s(7774).Z+"",width:"1614",height:"1210"})}),"\n",(0,n.jsx)(t.p,{children:"Congratulations - you are now running in a GitHub Codespace. There is a generous free quota that is sufficient for this purpose. Want to learn more about how this works, and how you can optimize your free usage? Check out these references:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.github.com/en/codespaces/overview",children:"GitHub Codespaces Overview"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.github.com/en/billing/managing-billing-for-github-codespaces/viewing-your-github-codespaces-usage",children:"View Your GitHub Codespaces Usage"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.github.com/en/billing/managing-billing-for-github-codespaces/managing-the-spending-limit-for-github-codespaces",children:"Manage Spending Limits for GitHub Codespaces"})}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"\ud83d\ude80 | You are now ready to validate the sample application."}),"\n",(0,n.jsx)(t.h2,{id:"step-3-validate-the-sample-app",children:"Step 3: Validate The Sample App"}),"\n",(0,n.jsxs)(t.p,{children:["The repository comes with a ",(0,n.jsx)(t.a,{href:"https://github.com/Playwright-FYI/playwright-workshop-101/tree/main/app-todomvc",children:"sample application"})," that we'll be testing. Before we get started, let's make sure the application runs as expected."]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Change to the application directory"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"cd app-todomvc\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsxs)(t.li,{children:["Use a recent Node.js version (for example LTS). You can use the ",(0,n.jsx)(t.a,{href:"https://github.com/nvm-sh/nvm",children:"Node Version Manager"})," to easily switch versions."]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"nvm use --lts\n"})}),"\n",(0,n.jsx)(t.p,{children:"You should now see the version of Node you are using:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"Now using node v18.18.0 (npm v9.8.1)\n"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Follow instructions to build and run app"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npm run build\nnpm run start\n"})}),"\n",(0,n.jsx)(t.p,{children:"After running the above commands you should now see a message in the terminal telling you that the app has started and is being served."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"> start\n> node ./serve.js\n\nServing on http://localhost:4200/\n"})}),"\n",(0,n.jsxs)(t.p,{children:["You should see a pop-up like this in your Visual Studio Code environment. This tells you that GitHub Codespaces is ",(0,n.jsx)(t.em,{children:"automatically forwarding that port to your host device"})," allowing the server on that port to be accessed from your device browser (outside the GitHub Codespaces dev container). See: ",(0,n.jsx)(t.a,{href:"https://docs.github.com/en/codespaces/developing-in-codespaces/forwarding-ports-in-your-codespace",children:"forwarding ports in your codespace"})," for more information."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Forward Ports",src:s(9488).Z+"",width:"666",height:"161"})}),"\n",(0,n.jsxs)(t.p,{children:['You can now click "Open in Browser" to preview the application in your host device. You should see something like this:\n',(0,n.jsx)(t.img,{alt:"ToDoMVC Preview",src:s(2170).Z+"",width:"1606",height:"708"})]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"Sidebar: About ToDoMVC"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The sample application is an ",(0,n.jsx)(t.em,{children:"adapted version"})," of the ",(0,n.jsx)(t.a,{href:"https://github.com/tastejs/todomvc",children:"tastejs/todomvc"})," reference application set. More specifically, it is derived from the ",(0,n.jsx)(t.a,{href:"https://todomvc.com/examples/typescript-react/#/",children:"TypeScript & React"})," version of the application whose ",(0,n.jsx)(t.a,{href:"https://github.com/tastejs/todomvc/tree/gh-pages/examples/typescript-react",children:"source is available here"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The Playwright team maintains a ",(0,n.jsx)(t.a,{href:"https://demo.playwright.dev/todomvc",children:"hosted version"})," of this application that has been adapted to support the ",(0,n.jsx)(t.code,{children:"demo-todo-app.spec.ts"})," sample specification that ships with every new Playwright project. We are using ",(0,n.jsx)(t.em,{children:"that"})," version of the ToDoMVC app so we can deconstruct this demo sample to learn key concepts."]}),"\n",(0,n.jsx)(t.p,{children:"\ud83d\ude80 | Congratulations!! You can now validate the Playwright setup."}),"\n",(0,n.jsx)(t.h2,{id:"step-4-validate-playwright-setup",children:"Step 4: Validate Playwright Setup"}),"\n",(0,n.jsxs)(t.p,{children:["The repository has been setup to have a Playwright project scaffolded at the root of the repository, with the target sample application source in the ",(0,n.jsx)(t.code,{children:"app-todomvc/"})," directory. The Playwright setup consists of ",(0,n.jsx)(t.em,{children:"four"})," key files or folders:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"playwright.config.ts"})," - the Playwright Test Configuration file."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"tests/"})," -   top-level folder that Playwright searches recursively, for tests"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"tests-examples/"})," - staging folder with demo test scripts to try out."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:".github/workflows/playwright.yml"})," - GitHub Action for automating tests"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Playwright releases a new version every month. Let's update to the latest version by running the following command:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npm install -D @playwright/test@latest\n"})}),"\n",(0,n.jsx)(t.p,{children:"Once you update to the latest version of Playwright you will then need to install the latest browsers as these are not installed by default when installing Playwright."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright install\n"})}),"\n",(0,n.jsx)(t.h2,{id:"step-5-validate-playwright-test-runner",children:"Step 5: Validate Playwright Test Runner"}),"\n",(0,n.jsxs)(t.p,{children:["As we mentioned earlier, Playwright ships with a default ",(0,n.jsx)(t.code,{children:"demo-todo-app.spec.ts"})," that you will find under the ",(0,n.jsx)(t.code,{children:"test-examples/"})," folder. If you open that file, you will notice this code - which tells us the test script is running against the Playwright team's hosted version of this sample app.\nv"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"test.beforeEach(async ({ page }) => {\n  await page.goto('https://demo.playwright.dev/todomvc');\n});\n"})}),"\n",(0,n.jsx)(t.p,{children:"Let's go ahead and run the Playwright test."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test tests-examples/demo-todo-app.spec.ts\n"})}),"\n",(0,n.jsx)(t.p,{children:"You will get the following error message:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"Error: No tests found\n"})}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"\ud83d\udfe5 What just happened? Why were we unable to find the tests?"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["We just learned a key ",(0,n.jsx)(t.em,{children:"Playwright Configuration"})," property: ",(0,n.jsx)(t.code,{children:"testDir"}),". If you open the ",(0,n.jsx)(t.code,{children:"playwright.config.ts"})," file, you will see this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"export default defineConfig({\n  testDir: './tests',\n  ..\n})\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This property tells the Playwright Test runner to look ",(0,n.jsx)(t.em,{children:"only within the subfolders of that root directory"})," to locate relevant test specifications. Since our ",(0,n.jsx)(t.code,{children:"demo-todo-app.spec.ts"})," was in a sibling ",(0,n.jsx)(t.code,{children:"test-examples/"})," folder, it was not seen."]}),"\n",(0,n.jsxs)(t.p,{children:["Let's change that. Modify the line to read ",(0,n.jsx)(t.code,{children:"testDir: '.'"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"export default defineConfig({\n  testDir: '.',\n  ..\n})\n"})}),"\n",(0,n.jsxs)(t.p,{children:["We are now telling Playwright that the top-level folder for test specifications is the root of the repo - so ",(0,n.jsx)(t.em,{children:"all"})," test specifications in the repo now become discoverable. ",(0,n.jsx)(t.em,{children:"Save the change, then run the test again"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test tests-examples/demo-todo-app.spec.ts\n"})}),"\n",(0,n.jsx)(t.p,{children:"Once the tests have finished running you should see that 72 tests were run using 3 workers, as well as how many tests passed and how long it took to run."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"Running 72 tests using 3 workers\n  72 passed (44.5s)\n"})}),"\n",(0,n.jsx)(t.p,{children:"\ud83d\ude80 | Congratulations!! We validated the Playwright Test Runner."}),"\n",(0,n.jsx)(t.h2,{id:"step-6-validate-test-with-sample-app",children:"Step 6: Validate Test With Sample App"}),"\n",(0,n.jsxs)(t.p,{children:["Since the sample application is ",(0,n.jsx)(t.em,{children:"exactly the same"})," as the deployed application, we should be able to run the tests against the ",(0,n.jsx)(t.em,{children:"local preview endpoint"})," and have them pass. Right?"]}),"\n",(0,n.jsxs)(t.p,{children:["Let's try it out. To simplify this exercise at this stage, I simply made a copy of the original spec in ",(0,n.jsx)(t.code,{children:"tests-examples/demo-todo-local.spec.ts"})," - then changed the target url to ",(0,n.jsx)(t.code,{children:"http://localhost:4200"})," (the preview URL for our dev server)."]}),"\n",(0,n.jsx)(t.p,{children:"Let's try this out. Note that I am assuming you still have your sample app running locally from Step 3. If not, first start that up as we did before, in one terminal."}),"\n",(0,n.jsxs)(t.p,{children:["Once it is running, then run Playwright Test as follows - note that this time, for fun, we've added an option ",(0,n.jsx)(t.code,{children:"--project chromium"}),". This tells the Playwright Test runner to run this only for the single browser (chromium) instead of all three (default option)."]}),"\n",(0,n.jsx)(t.p,{children:"Run the demo-todo-local test - default 1 browser:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npx playwright test demo-todo-local --project chromium\n"})}),"\n",(0,n.jsx)(t.p,{children:"You should now see only 24 tests were run using 3 workers as tests are only run on one browser, therefore less tests are being run."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"Running 24 tests using 3 workers\n  24 passed (13.0s)\n"})}),"\n",(0,n.jsx)(t.p,{children:"\ud83d\ude80 |  We've validated that the tests from the demo todo app pass!!"}),"\n",(0,n.jsxs)(t.h2,{id:"--dont-forget-to-reset-testdir",children:["\ud83d\uded1 | Don't Forget To Reset ",(0,n.jsx)(t.code,{children:"testDir"})]}),"\n",(0,n.jsxs)(t.p,{children:["In Step 5, we decided to change the ",(0,n.jsx)(t.code,{children:"testDir"}),' property to "." so we could find test specifications in the entire repo. Let\'s change that back to the default ',(0,n.jsx)(t.code,{children:"./tests"})," value so we can reset our environment for starting the next exercise."]}),"\n",(0,n.jsxs)(t.p,{children:["Your ",(0,n.jsx)(t.code,{children:"playwright.config.ts"})," should now read:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"export default defineConfig({\n  testDir: './tests',\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  ..\n})\n"})}),"\n",(0,n.jsx)(t.p,{children:"\ud83d\ude80 | Let's move on and learn more about the Playwright Test Specification!"})]})}const d=function(e={}){const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(c,e)})):c(e)}},7774:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/02-setup-build-codespace-eb23ad50263e3e93202c01233852a51d.png"},9488:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/02-setup-forward-ports-bf86f622c51050ace7fb619e5ea9bb2f.png"},1909:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/02-setup-launch-codespace-2c726a89890c8cdc643bf1325701be02.png"},2170:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/02-setup-preview-app-6d5c4dd99bb32e7bac316bcd81c46da4.png"},1151:(e,t,s)=>{s.d(t,{Zo:()=>r,ah:()=>a});var n=s(7294);const i=n.createContext({});function a(e){const t=n.useContext(i);return n.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const o={};function r({components:e,children:t,disableParentContext:s}){let r;return r=s?"function"==typeof e?e({}):e||o:a(e),n.createElement(i.Provider,{value:r},t)}}}]);